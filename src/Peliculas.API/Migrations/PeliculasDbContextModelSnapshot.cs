// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Peliculas.API.Contextos;

#nullable disable

namespace Peliculas.API.Migrations
{
    [DbContext(typeof(PeliculasDbContext))]
    partial class PeliculasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.Property<int>("GenerosId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculasId")
                        .HasColumnType("int");

                    b.HasKey("GenerosId", "PeliculasId");

                    b.HasIndex("PeliculasId");

                    b.ToTable("GeneroPelicula");
                });

            modelBuilder.Entity("Peliculas.API.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Biografia de Actor");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasComment("Fecha de Nacimiento del Actor");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Actor");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_ActorNomDup")
                        .IsUnique();

                    b.ToTable("Actor", (string)null);

                    b.HasComment("Catalogo de Actores");
                });

            modelBuilder.Entity("Peliculas.API.Entities.Cine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Cine");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_CineNomDup")
                        .IsUnique();

                    b.ToTable("Cine", (string)null);

                    b.HasComment("Catalogo de Cines");
                });

            modelBuilder.Entity("Peliculas.API.Entities.CineOferta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<decimal>("PorcentajeDescuento")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CineId" }, "Ix_CineOfertaCinDup")
                        .IsUnique();

                    b.ToTable("CineOferta", (string)null);

                    b.HasComment("Catalogo de ofertas por cine");
                });

            modelBuilder.Entity("Peliculas.API.Entities.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Nombre del Genero");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Nombre" }, "Ix_GeneroNomDupl")
                        .IsUnique();

                    b.ToTable("Genero", (string)null);

                    b.HasComment("Catalogo de Generos");
                });

            modelBuilder.Entity("Peliculas.API.Entities.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("EnCartelera")
                        .HasColumnType("bit")
                        .HasComment("Si esta en Cartelera");

                    b.Property<DateTime>("FechaEstreno")
                        .HasColumnType("date")
                        .HasComment("Fecha de Estreno");

                    b.Property<string>("PosterURL")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasComment("URL de la imagen del Poster");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasComment("Titulo de la Pelicula");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Titulo" }, "Ix_PelTituloDup")
                        .IsUnique();

                    b.ToTable("Pelicula", (string)null);

                    b.HasComment("Catalogo de Peliculas");
                });

            modelBuilder.Entity("Peliculas.API.Entities.SalaCine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CineId")
                        .HasColumnType("int")
                        .HasComment("El id Consecutivo de la tabla cine");

                    b.Property<decimal>("Precio")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasComment("El precio de la sala del cine");

                    b.Property<int>("TipoSalaDeCine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("CineId");

                    b.HasIndex(new[] { "Id", "CineId" }, "Ix_SalaCineNoDup")
                        .IsUnique();

                    b.ToTable("SalaCine", (string)null);

                    b.HasComment("Salas de cine");
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.HasOne("Peliculas.API.Entities.Genero", null)
                        .WithMany()
                        .HasForeignKey("GenerosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peliculas.API.Entities.Pelicula", null)
                        .WithMany()
                        .HasForeignKey("PeliculasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Peliculas.API.Entities.CineOferta", b =>
                {
                    b.HasOne("Peliculas.API.Entities.Cine", null)
                        .WithOne("CineOferta")
                        .HasForeignKey("Peliculas.API.Entities.CineOferta", "CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Peliculas.API.Entities.SalaCine", b =>
                {
                    b.HasOne("Peliculas.API.Entities.Cine", "Cine")
                        .WithMany("SalaCines")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");
                });

            modelBuilder.Entity("Peliculas.API.Entities.Cine", b =>
                {
                    b.Navigation("CineOferta");

                    b.Navigation("SalaCines");
                });
#pragma warning restore 612, 618
        }
    }
}
